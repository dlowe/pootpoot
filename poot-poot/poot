#!/usr/bin/env python
"""fetch metadata describing a single random interpretation"""

## system
import logging

## app engine
from google.appengine.ext import webapp
from google.appengine.ext.webapp.util import run_wsgi_app

## this app
from pypoot import json
from pypoot import interpretation

def _get_interpretation_arguments(request):
    """turn interpretation filter arguments into a dictionary"""
    filters = {}

    if (request.get('key_string')):
        filters['key_string'] = request.get('key_string')

    if (request.get('title_link')):
        filters['title_link'] = request.get('title_link')

    return filters

class List(webapp.RequestHandler):
    """request handler for /list"""

    def get(self):
        """get a list of interpretations"""

        status  = None
        content = None
        interpretation_list       = []
        try:
            interpretation_list = interpretation.list(
                _get_interpretation_arguments(self.request))
        except Exception, error:
            logging.error("Unhandled (generic) exception: %s", str(error))
            status  = 500
            content = { 'error': str(error) }
        else:
            if interpretation_list == []:
                status  = 404
                content = { 'error': 'Not Found' }
            else:
                status  = 200
                content = []
                for i in interpretation_list:
                    content.append({ 'title': i.title,
                                     'author': i.author,
                                     'decorated_location':
                                       i.decorated_location() })

        self.response.set_status(status)
        if 'Content-Type' in self.response.headers:
            del self.response.headers['Content-Type']
        self.response.headers.add_header('Content-Type',
            'text/plain')

        self.response.out.write(json.ify(content))

class Count(webapp.RequestHandler):
    """request handler for /count"""

    def get(self):
        """handle a get request"""

        status  = None
        content = None
        try:
            count = interpretation.count(
                _get_interpretation_arguments(self.request))
        except Exception, error:
            logging.error("Unhandled (generic) exception: %s", str(error))
            status  = 500
            content = { 'error': str(error) }
        else:
            status  = 200
            content = { 'count': str(count) }

        self.response.set_status(status)
        if 'Content-Type' in self.response.headers:
            del self.response.headers['Content-Type']
        self.response.headers.add_header('Content-Type', 'text/plain')

        self.response.out.write(json.ify(content))

class Poot(webapp.RequestHandler):
    """request handler for /poot"""

    def get(self):
        """handle a get request"""

        status  = None
        content = None
        i       = None
        try:
            i = interpretation.poot(_get_interpretation_arguments(self.request))
        except Exception, error:
            logging.error("Unhandled (generic) exception: %s", str(error))
            status  = 500
            content = { 'error': str(error) }
        else:
            if i == None:
                status = 404
                content = { 'error': 'Not Found' }
            else:
                status  = 200
                content = { 'title': i.title,
                            'author': i.author,
                            'type': i.type,
                            'decorated_location': i.decorated_location(),
                            'content_location': i.content_location() }

        self.response.set_status(status)
        if 'Content-Type' in self.response.headers:
            del self.response.headers['Content-Type']
        self.response.headers.add_header('Content-Type', 'text/plain')

        self.response.out.write(json.ify(content))

APPLICATION = webapp.WSGIApplication([('/poot', Poot),
                                      ('/list', List),
                                      ('/count', Count)], debug=True)

def main():
    """invoke the wsgi thingy"""
    run_wsgi_app(APPLICATION)

if __name__ == "__main__":
    main()
