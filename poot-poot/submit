#!/usr/bin/env python
"""store a new interpretation"""

## system
import sys
import logging

## app engine
from google.appengine.ext import webapp
from google.appengine.ext.webapp.util import run_wsgi_app

## this app
from pypoot import json
from pypoot import interpretation

class Submit(webapp.RequestHandler):
    """request handler for /submit"""

    def post(self):
        """submit an interpretation"""

        status  = None
        content = None
        i       = None
        try:
            i = interpretation.submit(
                 title=self.request.get('title'),
                 author=self.request.get('author'),
                 type=self.request.get('type'),
                 content=self.request.get('content'))
        except interpretation.BunkInterpretation, error:
            status  = 400
            content = { 'error': str(error) }
        except:
            logging.error("Unhandled (generic) exception: ",
                str(sys.exc_info()[0]))
            status  = 500
            content = { 'error': str(sys.exc_info()[0]) }
        else:
            status  = 200
            content = { 'key': str(i.key()),
                        'decorated_location': i.decorated_location(),
                        'owner_baton': i.owner_baton }

        self.response.set_status(status)
        if 'Content-Type' in self.response.headers:
            del self.response.headers['Content-Type']
        self.response.headers.add_header('Content-Type', 'text/plain')

        self.response.out.write(json.ify(content))

class Approve(webapp.RequestHandler):
    """approve a submitted interpretation"""

    def post(self):
        """approve a submitted interpretation"""

        status  = None
        content = None
        i       = None
        try:
            i = interpretation.poot({ 'key_string': self.request.get('key') })
            if i != None:
                interpretation.approve(i, self.request.get('owner_baton'))
        except interpretation.BadOwnerBaton:
            status  = 403
            content = { 'error': 'Bad owner baton given' }
        except:
            logging.error("Unhandled (generic) exception: ",
                str(sys.exc_info()[0]))
            status  = 500
            content = { 'error': str(sys.exc_info()[0]) }
        else:
            if i == None:
                status = 404
                content = { 'error': 'Not Found' }
            else:
                status  = 200
                content = { 'ok': 'ok' }

        self.response.set_status(status)
        if 'Content-Type' in self.response.headers:
            del self.response.headers['Content-Type']
        self.response.headers.add_header('Content-Type', 'text/plain')

        self.response.out.write(json.ify(content))

class Disapprove(webapp.RequestHandler):
    """disapprove a submitted interpretation"""

    def post(self):
        """disapprove a submitted interpretation"""

        status  = None
        content = None
        i       = None
        try:
            i = interpretation.poot({ 'key_string': self.request.get('key') })
            if i != None:
                interpretation.delete(i, self.request.get('owner_baton'))
        except interpretation.BadOwnerBaton:
            status  = 403
            content = { 'error': 'Bad owner baton given' }
        except:
            logging.error("Unhandled (generic) exception: ",
                str(sys.exc_info()[0]))
            status  = 500
            content = { 'error': str(sys.exc_info()[0]) }
        else:
            if i == None:
                status = 404
                content = { 'error': 'Not Found' }
            else:
                status  = 200
                content = { 'ok': 'ok' }

        self.response.set_status(status)
        if 'Content-Type' in self.response.headers:
            del self.response.headers['Content-Type']
        self.response.headers.add_header('Content-Type', 'text/plain')

        self.response.out.write(json.ify(content))

APPLICATION = webapp.WSGIApplication([('/submit', Submit),
                                      ('/approve', Approve),
                                      ('/disapprove', Disapprove)], debug=True)

def main():
    """run the request thingy"""
    run_wsgi_app(APPLICATION)

if __name__ == "__main__":
    main()
